<?php



// 
// Resetta la Randomization
// 
// Resetting the Gaming-Matrix (per una nuova Sessione di gioco)
// 
function LUDA_API_SRV_CMD_Game_Randomization_Reset_01( )
    {
    
    // Config.
    $oConfig = new cLUDA_Config();
    $l_sConfigName = "LUDA_SERVER_MASTER_GAME_STEP_CURR";
    $l_sConfigValue = 0;
    $l_sConfigValue = $oConfig->Put_ByName_01( $l_sConfigName, $l_sConfigValue );

    //echo "LINK_TYPE = [" .$link_type. "]<BR>\n";
  
    }//LUDA_API_SRV_CMD_Game_Randomization_Reset_01

  
//
// Imposta (su DB) la Randomization (allo 'step' n. 1).
// 
function LUDA_API_SRV_CMD_Game_Randomization_GotoNextStep_01( )
    {

    // Config.
    $oConfig = new cLUDA_Config();
    
    
$l_sConfigName = "LUDA_SERVER_MASTER_GAME_STEPS_QTY";

$l_sConfigValue = $oConfig->Get_ByName_01( $l_sConfigName );
$l_iStepsOfGamesQuantity = intval( $l_sConfigValue );
//echo "LUDA_SERVER_MASTER_GAME_STEPS_QTY = [" .$l_iStepsOfGamesQuantity. "]<BR>\n";

    
    
    
    $l_sConfigName = "LUDA_SERVER_MASTER_GAME_STEP_CURR";

    $l_sConfigValue = $oConfig->Get_ByName_01( $l_sConfigName );
    $l_iPositionOfGroup = intval( $l_sConfigValue );
    echo "SERVER_MASTER_GAME_STEP_CURR = [" .$l_iPositionOfGroup. "]<BR>\n";

    if( $l_iPositionOfGroup < $l_iStepsOfGamesQuantity )
        {
        $l_iPositionOfGroup++;
        }
    else
        {
        echo "SERVER_MASTER_GAME_STEP_CURR :: RAGGIUNTO IL MASSIMO NUMERO DI GAMES (Non Incrementato lo step)!<BR>\n";
        }
    echo "SERVER_MASTER_GAME_STEP_CURR = [" .$l_iPositionOfGroup. "]<BR>\n";
        
    $l_sConfigValue = $oConfig->Put_ByName_01( $l_sConfigName, $l_iPositionOfGroup );

    $l_sConfigValue = $oConfig->Get_ByName_01( $l_sConfigName );
    $l_iPositionOfGroup = intval( $l_sConfigValue );
    echo "SERVER_MASTER_GAME_STEP_CURR = [" .$l_iPositionOfGroup. "]<BR>\n";


    
INUGGI    
    
< indicare a ciascuna APP -> REACH_UDA con il dato della matrix-randomization;
< ovvero: /api/app/ REACH_UDA con il dato preso dalla matrix-randomization    
  
    
< Mandare tutte le UDA in IDLE >    
    
    
    
    return $l_iPositionOfGroup ;
    
    }//LUDA_API_SRV_CMD_Game_Randomization_GotoNextStep_01

//  
// Ritorna il posizionamento del Gruppo/App 'indicato' quando si trova allo Step 'indicato.
//    
function LUDA_API_SRV_CMD_Game_Randomization_PositionOfApp_ByStep_Get_01( $p_iAppId, $p_iStepPos )
    {

//    $l_iConfig
            
    $l_iMasterGameStepsQty = 5; // Prendere da DB!
    
    $l_iPositionOfGroup = ($p_iAppId + ($p_iStepPos -1) );
    if( $l_iPositionOfGroup > $l_iMasterGameStepsQty ) 
        { $l_iPositionOfGroup = $l_iPositionOfGroup - 5; }

    // Return value.
    return( $l_iPositionOfGroup );

    }//LUDA_API_SRV_CMD_Game_Randomization_PositionOfApp_ByStep_Get_01
    
     
//
// Ritorna il numero di "Step" (di Games) corrente (da DB) sul numero totale di Game-steps.
// 
function LUDA_API_SRV_CMD_Game_Randomization_StepCurrent_Get_01( )
    {

    // Config.
    $oConfig = new cLUDA_Config();
    $l_sConfigName = "LUDA_SERVER_MASTER_GAME_STEP_CURR";

    $l_sConfigValue = $oConfig->Get_ByName_01( $l_sConfigName );
    $l_iCurrentStepOfGames = intval( $l_sConfigValue );
    //echo "SERVER_MASTER_GAME_STEP_CURR = [" .$l_iCurrentStepOfGames. "]<BR>\n";

    return $l_iCurrentStepOfGames ;
    
    }//LUDA_API_SRV_CMD_Game_Randomization_StepCurrent_Get_01
 
    
function LUDA_API_SRV_CMD_Game_Randomization_StepQuantity_Get_01( )
    {
    
    // Config.
    $oConfig = new cLUDA_Config();
    $l_sConfigName = "LUDA_SERVER_MASTER_GAME_STEPS_QTY";

    $l_sConfigValue = $oConfig->Get_ByName_01( $l_sConfigName );
    $l_iStepsOfGamesQuantity = intval( $l_sConfigValue );
    //echo "LUDA_SERVER_MASTER_GAME_STEPS_QTY = [" .$l_iStepsOfGamesQuantity. "]<BR>\n";

    return $l_iStepsOfGamesQuantity ;

    }//LUDA_API_SRV_CMD_Game_Randomization_StepQuantity_Get_01  
     
    

?>